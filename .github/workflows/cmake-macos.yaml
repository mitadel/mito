# -*- yaml -*-
#
# Copyright (c) 2020-2024, the MiTo Authors, all rights reserved
#

name: cmake-macos
on:
  push:
    branches:
      - 'main'
  pull_request:
  workflow_dispatch:


jobs:
  # build and test the ref that launched this action
  build:
    name: >-
      ${{matrix.target}}
      python-${{matrix.python}}+${{matrix.suite}}-${{matrix.suiteVersion}}
      on ${{matrix.os}}
    runs-on: ${{matrix.os}}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-12]
        target: [Debug, Release]
        python: ["3.11"]
        suite: [gcc]
        suiteVersion: ["12"]
        include:
          - suite: gcc
            cc: gcc
            cxx: g++

    steps:
      - name: ${{matrix.os}} refresh
        run: |
          echo " -- install our dependencies"
          brew install make cmake metis open-mpi
          curl https://raw.githubusercontent.com/Homebrew/homebrew-core/67b277e6d1faee20d2aa4fc8b2dc229a241fa807/Formula/vtk.rb > vtk.rb
          HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=1 brew install vtk.rb

      - name: python ${{matrix.python}} setup
        uses: actions/setup-python@v4
        with:
          python-version: ${{matrix.python}}

      - name: install dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip3 install distro numpy pybind11 pytest vtk

      - name: checkout gtest
        uses: actions/checkout@v3
        with:
          repository: google/googletest
          path: googletest

      - name: install gtest
        run: |
          echo " -- switching to the build directory"
          mkdir build
          cd build
          echo " -- configuring the build"
          cmake -DCMAKE_INSTALL_PREFIX=${prefix} -DCMAKE_BUILD_TYPE=${target} -DCMAKE_C_COMPILER=${cc} -DCMAKE_CXX_COMPILER=${cxx} ${{github.workspace}}/googletest
          echo " -- building gtest"
          make -j 2 install
          echo " -- clean up"
          cd ${{runner.temp}}
          rm -r build
        env:
          prefix: ${{runner.temp}}/gtest_install
          target: Release
          cc: ${{matrix.cc}}-${{matrix.suiteVersion}}
          cxx: ${{matrix.cxx}}-${{matrix.suiteVersion}}
        working-directory: ${{runner.temp}}

      - name: checkout pyre
        uses: actions/checkout@v3
        with:
          repository: pyre/pyre
          fetch-depth: 0
          path: ${{github.workspace}}/pyre
          ref: tensor

      - name: retrieve pyre commit SHA
        id: pyre-sha
        run: |
          echo "PYRE-SHA=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        working-directory: ${{github.workspace}}/pyre

      - name: cache pyre
        id: cache-pyre
        uses: actions/cache@v3
        with:
          path: ${{runner.temp}}/pyre_install
          key: pyre-${{steps.pyre-sha.outputs.PYRE-SHA}}-${{matrix.os}}+python-${{matrix.python}}+${{matrix.suite}}-${{matrix.suiteVersion}}

      - if: steps.cache-pyre.outputs.cache-hit != 'true'
        name: build pyre
        run: |
          echo " -- switching to the build directory"
          mkdir build
          cd build
          echo " -- configuring the build"
          cmake -DCMAKE_INSTALL_PREFIX=${prefix} -DCMAKE_BUILD_TYPE=${target} -DCMAKE_C_COMPILER=${cc} -DCMAKE_CXX_COMPILER=${cxx} -DPython_ROOT_DIR=${pythonLocation} -Dpybind11_DIR=${pythonLocation}/lib/python${pythonVersion}/site-packages/pybind11/share/cmake/pybind11 ${{github.workspace}}/pyre
          echo " -- building pyre"
          make -j 2 install
          echo " -- clean up"
          cd ${{runner.temp}}
          rm -r build
        env:
          prefix: ${{runner.temp}}/pyre_install
          target: Release
          cc: ${{matrix.cc}}-${{matrix.suiteVersion}}
          cxx: ${{matrix.cxx}}-${{matrix.suiteVersion}}
          pythonVersion: ${{matrix.python}}
        working-directory: ${{runner.temp}}

      - name: list system packages
        run: |
          brew list

      - name: versions
        run: |
          echo " -- platform tag from python"
          python${pythonVersion} -c "import sys; print(sys.platform)"
          echo " -- distribution tag from python"
          python${pythonVersion} -c "import distro; print(distro.id(), distro.version())"
          echo " -- make"
          make --version
          echo " -- cmake"
          cmake --version
          echo " -- python"
          python3 --version
          echo " -- ${{matrix.suite}}"
          ${{matrix.suite}}-${{matrix.suiteVersion}} --version
        env:
          pythonVersion: ${{matrix.python}}

      - name: locations of python packages
        run: |
          echo " -- distro"
          pip3 show distro
          echo " -- numpy"
          pip3 show numpy
          echo " -- its headers"
          find ${pythonLocation}/lib/python${pythonVersion}/site-packages/numpy/core/include
          echo " -- pybind11"
          pip3 show pybind11
          echo " -- its headers"
          find ${pythonLocation}/lib/python${pythonVersion}/site-packages/pybind11
          echo " -- pytest"
          pip3 show pytest
          echo " -- vtk"
          pip3 show vtk
        env:
          pythonVersion: ${{matrix.python}}

      - name: checkout mito
        uses: actions/checkout@v3
        with:
          ref: ${{github.event.pull_request.head.sha}}
          path: mito

      - name: build mito
        run: |
          echo " -- switching to the build directory"
          mkdir build
          cd build
          echo " -- configuring the build"
          cmake -DCMAKE_INSTALL_PREFIX=${prefix} -DCMAKE_BUILD_TYPE=${target} -DCMAKE_C_COMPILER=${cc} -DCMAKE_CXX_COMPILER=${cxx} -DPython_EXECUTABLE=${pythonLocation}/bin/python${pythonVersion} -Dpybind11_DIR=${pythonLocation}/lib/python${pythonVersion}/site-packages/pybind11/share/cmake/pybind11 -DMITO_BUILD_TESTING=ON -Dpyre_DIR=${{runner.temp}}/pyre_install/share/cmake/pyre -DGTest_DIR=${{runner.temp}}/gtest_install/lib/cmake/GTest -DWITH_VTK=ON -DWITH_METIS=ON ${{github.workspace}}/mito
          echo " -- building mito"
          make -j 2 install
        env:
          prefix: ${{runner.temp}}/mito_install
          target: ${{matrix.target}}
          cc: ${{matrix.cc}}-${{matrix.suiteVersion}}
          cxx: ${{matrix.cxx}}-${{matrix.suiteVersion}}
          pythonVersion: ${{matrix.python}}
        working-directory: ${{runner.temp}}

      - name: test mito
        run: |
          echo " -- testing mito"
          ctest --output-on-failure -E postgres.ext
        working-directory: ${{runner.temp}}/build

      - name: create artifact
        if: ${{!cancelled()}}
        uses: actions/upload-artifact@v3
        with:
          name: mito_build_${{matrix.target}}
          path: ${{runner.temp}}/build
          retention-days: 7

# end of file
