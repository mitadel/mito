// -*- c++ -*-
//
// Copyright (c) 2020-2024, the MiTo Authors, all rights reserved
//

// code guard
#if !defined(mito_geometry_algebra_polar_coordinates_h)
#define mito_geometry_algebra_polar_coordinates_h


namespace mito::geometry {

    // addition of polar coordinates xA + xB
    template <>
    constexpr auto operator+(const Coordinates<2, POLAR> & xA, const Coordinates<2, POLAR> & xB)
        -> Coordinates<2, POLAR>
    {
        // get the radius and angle of the two points
        const auto & r_A = xA._array[0];
        const auto & r_B = xB._array[0];
        const auto & theta_A = xA._array[1];
        const auto & theta_B = xB._array[1];

        // the angle of the sum of the two points
        auto r_AB_c = r_A * std::cos(theta_A) + r_B * std::cos(theta_B);
        auto r_AB_s = r_A * std::sin(theta_A) + r_B * std::sin(theta_B);
        auto theta_AB = std::atan2(r_AB_s, r_AB_c);

        // the radius of the sum of the two points
        auto r_AB =
            std::sqrt(r_A * r_A + r_B * r_B + 2.0 * r_A * r_B * std::cos(theta_A - theta_B));

        // all done
        return Coordinates<2, POLAR>({ r_AB, theta_AB });
    }

    // multiplication of polar coordinates a * xB
    template <>
    constexpr auto operator*(const scalar_t & a, const Coordinates<2, POLAR> & xB)
        -> Coordinates<2, POLAR>
    {
        // get the radius and angle of the point
        const auto r_B = xB._array[0];
        const auto theta_B = xB._array[1];

        // scale the radius and return
        return Coordinates<2, POLAR>({ a * r_B, theta_B });
    }

    // subtraction of coordinates xA - xB
    template <>
    constexpr auto operator-(const Coordinates<2, POLAR> & xA, const Coordinates<2, POLAR> & xB)
        -> mito::vector_t<2>
    {
        // get the radius and angle of the two points
        const auto & r_A = xA._array[0];
        const auto & r_B = xB._array[0];
        const auto & theta_A = xA._array[1];
        const auto & theta_B = xB._array[1];

        return { r_A * std::cos(theta_A - theta_B) - r_B, r_A * std::sin(theta_A - theta_B) };
    }
}


#endif

// end of file
