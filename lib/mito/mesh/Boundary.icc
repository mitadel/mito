// -*- c++ -*-
//
// Copyright (c) 2020-2024, the MiTo Authors, all rights reserved
//

// code guard
#if !defined(mito_mesh_boundary_icc)
#error this file contains implementation details for mesh boundary
#else


template <class meshT>
auto
mito::mesh::Boundary<meshT>::boundary_size(const mesh_type & mesh) -> int
{
    // number of boundary cells
    int count = 0;

    // loop on the mesh cells
    for (const auto & cell : mesh.cells()) {
        // loop on the topological composition of {cell} and
        // increment counter if {subcell} is on the boundary of the mesh
        count +=
            std::ranges::count_if(cell.simplex()->composition(), [&mesh](const auto & subcell) {
                return mesh.isOnBoundary(subcell);
            });
    }

    // return the count of boundary cells
    return count;
}

template <class meshT>
auto
mito::mesh::Boundary<meshT>::boundary(const mesh_type & mesh) -> boundary_mesh_type
{
    // instantiate a new mesh for the boundary elements
    boundary_mesh_type boundary;

    // loop on the mesh cells
    for (const auto & cell : mesh.cells()) {
        // create view of {subcell}s on the boundary of the mesh
        auto subcellsOnBoundary =
            cell.simplex()->composition() | std::views::filter([&mesh](const auto & subcell) {
                return mesh.isOnBoundary(subcell);
            });
        // loop on the {subcell} on the boundary
        for (const auto & subcell : subcellsOnBoundary) {
            // add {cell} to the boundary mesh
            boundary.insert(mito::geometry::geometric_simplex<D>(subcell, cell.nodes()));
        }
    }

    // return the boundary mesh
    return boundary;
}


#endif

// end of file
