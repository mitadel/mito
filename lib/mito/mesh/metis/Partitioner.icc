// code guard
#if !defined(mito_mesh_metis_partitioner_icc)
#error this file contains implementation details for metis mesh partitioner
#else


// QUESTION: should these methods belong to the interface of class {Mesh}?
template <class meshT, mito::geometry::CoordinateType coordT>
auto
mito::mesh::metis::Partitioner<meshT, coordT>::_populate_vertices_map(const mesh_type & mesh)
    -> auto
{
    // a set collecting all the vertices (without repeated entries)
    std::set<vertex_type> vertex_collection;

    // populate the {vertex_collection}
    // loop on cells in {mesh}
    for (const auto & cell : mesh.cells()) {
        // append vertices of current cell to {vertex_collection}
        cell.simplex()->vertices(vertex_collection);
    }

    // a vector with all vertices
    std::vector<vertex_type> id_to_vertex(vertex_collection.begin(), vertex_collection.end());

    // a map between a vertex and an integer id
    std::map<vertex_type, int> vertex_to_id;

    // populate the {vertex_to_id} map
    for (size_t id = 0; id < std::size(id_to_vertex); ++id) {
        vertex_to_id[id_to_vertex[id]] = id;
    }

    // all done
    return vertex_to_id;
}

template <class meshT, mito::geometry::CoordinateType coordT>
auto
mito::mesh::metis::Partitioner<meshT, coordT>::_get_ordered_mesh_cells(
    const mesh_type & mesh, const coordinate_system_type & coordinate_system) -> auto
{
    // define operator< for cells, given a geometry
    auto cell_compare = [&coordinate_system](
                            const cell_type & cell_a, const cell_type & cell_b) -> bool {
        // get the barycenter of {cell_a}
        auto barycenter_a = mito::geometry::barycenter(cell_a, coordinate_system);
        // get the barycenter of {cell_a}
        auto barycenter_b = mito::geometry::barycenter(cell_b, coordinate_system);
        // return lexicographical comparison of the barycenters
        return barycenter_a < barycenter_b;
    };

    // an ordered set of cells
    std::set<cell_type, decltype(cell_compare)> cells(cell_compare);

    // insert mesh cells in ordered set
    for (const auto & cell : mesh.cells()) {
        cells.insert(cell);
    }

    // return ordered set of cells
    return cells;
}

template <class meshT, mito::geometry::CoordinateType coordT>
auto
mito::mesh::metis::Partitioner<meshT, coordT>::_populate_element_connectivity(
    const auto & cells, const auto & vertex_to_id, const coordinate_system_type & coordinate_system)
    -> auto
{
    // get the total number of cells in the mesh
    int n_elements = std::size(cells);

    // number of vertices per element in this mesh type
    int n_vertices_per_element = mesh_type::n_vertices;

    // the element connectivity
    std::vector<int> element_connectivity(n_elements * n_vertices_per_element);

    // define operator< for nodes, given a coordinate system
    auto node_compare = [&coordinate_system](
                            const node_type & node_a, const node_type & node_b) -> bool {
        auto position_a = coordinate_system.coordinates(node_a.point());
        auto position_b = coordinate_system.coordinates(node_b.point());
        // return lexicographical comparison of the positions
        return position_a < position_b;
    };
    // a set to store the (lexicographically ordered) vertices of a cell
    // note: the lexicographic ordering guarantees that all processors agree on the mesh partitions
    std::set<node_type, decltype(node_compare)> nodes(node_compare);

    // cell counter
    int e = 0;
    // loop on cells
    for (const auto & cell : cells) {
        // spatially order cell nodes
        for (const auto & node : cell.nodes()) {
            nodes.insert(node);
        }
        // node counter
        int v = 0;
        for (const auto & node : nodes) {
            // populate element connectivity with the id of each of its vertices
            element_connectivity[n_vertices_per_element * e + v] = vertex_to_id.at(node.vertex());
            // increment
            ++v;
        }
        // clear cell nodes
        nodes.clear();

        // increment
        ++e;
    }

    // all done
    return element_connectivity;
}

template <class meshT, mito::geometry::CoordinateType coordT>
auto
mito::mesh::metis::Partitioner<meshT, coordT>::_metis_paint_partition(
    std::vector<int> & element_connectivity, int n_vertices, int n_elements, int n_partitions)
    -> auto
{
    // idx_t objval;
    std::vector<idx_t> painting(n_elements, 0);

    // METIS common nodes that two elements must share to be considered adjacent elements
    // NOTE: not general: n_common is equal to simplex order only in case of simplicial cells
    int n_common = mesh_type::order;

    // number of vertices per element in this mesh type
    int n_vertices_per_element = mesh_type::n_vertices;

    std::vector<int> element_index(n_elements + 1, 0);
    int node_index = 0;
    for (size_t i = 0; i < std::size(element_index); ++i, node_index += n_vertices_per_element) {
        element_index[i] = node_index;
    }

    // Define the options for METIS
    idx_t options[METIS_NOPTIONS];
    METIS_SetDefaultOptions(options);

    // setup METIS variable which is counting the number of cut edges: NOT USEFUL
    int edgecut = 0;

    // create an array for the procId per node: NOT USEFUL
    std::vector<int> npart(n_vertices, 0);

    [[maybe_unused]] int metisResult = METIS_PartMeshDual(
        &n_elements, &n_vertices, element_index.data(), element_connectivity.data(), NULL, NULL,
        &n_common, &n_partitions, NULL, options, &edgecut, painting.data(), npart.data());

    // assert that metis ran correctly
    assert(metisResult == 1);

    // all done
    return painting;
}

template <class meshT, mito::geometry::CoordinateType coordT>
auto
mito::mesh::metis::Partitioner<meshT, coordT>::_create_partitioned_mesh(
    const auto & cells, const auto & painting, int n_rank) -> mesh_type
{
    // an empty mesh of same type of the original mesh
    mesh_type partitioned_mesh;

    // fill in partitioned mesh with the element with painting {n_rank}
    int e = 0;
    for (const auto & cell : cells) {
        // if the painting matches the {n_rank} requested
        if (painting[e] == n_rank) {
            partitioned_mesh.insert(cell);
        }
        ++e;
    }

    // returned partitioned mesh
    return partitioned_mesh;
}

template <class meshT, mito::geometry::CoordinateType coordT>
auto
mito::mesh::metis::Partitioner<meshT, coordT>::partition(
    const mesh_type & mesh, const coordinate_system_type & coordinate_system, int n_partitions,
    int n_rank) -> mesh_type
{
    // if it is a single partition, return a copy of the mesh
    if (n_partitions == 1) {
        // make a copy of the original mesh
        mesh_type mesh_copy;

        // loop over all the cells of the original mesh
        for (const auto & cell : mesh.cells()) {
            // populate the copy
            mesh_copy.insert(cell.nodes());
        }

        // all done
        return mesh_copy;
    }

    // populate a map between vertices and a continuous integer id = 0, ..., n_vertices - 1
    auto vertex_to_id = _populate_vertices_map(mesh);

    // get the mesh cells in with a lexicographic order on the barycenter
    // note: the lexicographic ordering guarantees that all processors agree on the mesh partitions
    auto cells = _get_ordered_mesh_cells(mesh, coordinate_system);

    // populate elements connectivity
    auto connectivity = _populate_element_connectivity(cells, vertex_to_id, coordinate_system);

    // get the total number of cells in the mesh
    int n_elements = std::size(cells);

    // get the total number of vertices in the mesh
    int n_vertices = std::size(vertex_to_id);

    // call metis partitioner
    auto painting = _metis_paint_partition(connectivity, n_vertices, n_elements, n_partitions);

    // create a subdivision of {mesh} with the computed {painting}
    auto partitioned_mesh = _create_partitioned_mesh(cells, painting, n_rank);

    // all done
    return partitioned_mesh;
}


#endif

// end of file
