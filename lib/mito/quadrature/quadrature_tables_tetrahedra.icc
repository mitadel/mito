// -*- c++ -*-
//
// Copyright (c) 2020-2024, the MiTo Authors, all rights reserved
//

// code guard
#pragma once


namespace mito::quadrature {

    template <>
    constexpr auto QuadratureTable<GAUSS, topology::tetrahedron_t, 1>() -> auto
    {
        constexpr int Q = 1;
        using table_type = Table<topology::tetrahedron_t, Q>;
        using point_weight_pair_type = table_type::point_weight_pair_type;

        /*Hammer rule*/
        return table_type(
            { /*{point}, weight*/
              point_weight_pair_type({ 1.0 / 4.0, 1.0 / 4.0, 1.0 / 4.0, 1.0 / 4.0 }, 1.0) });
    }

    template <>
    constexpr auto QuadratureTable<GAUSS, topology::tetrahedron_t, 2>() -> auto
    {
        constexpr int Q = 4;
        using table_type = Table<topology::tetrahedron_t, Q>;
        using point_weight_pair_type = table_type::point_weight_pair_type;

        constexpr auto a = 0.5854101966249685;
        constexpr auto b = 0.1381966011250105;

        /*Hammer rule*/
        return table_type({ /*{point}, weight*/
                            point_weight_pair_type({ a, b, b, b }, 1.0 / 4.0),
                            point_weight_pair_type({ b, a, b, b }, 1.0 / 4.0),
                            point_weight_pair_type({ b, b, a, b }, 1.0 / 4.0),
                            point_weight_pair_type({ b, b, b, a }, 1.0 / 4.0) });
    }

}    // namespace mito


// end of file
