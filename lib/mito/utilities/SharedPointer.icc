// -*- c++ -*-
//
// Copyright (c) 2020-2024, the MiTo Authors, all rights reserved
//


#if !defined(mito_utilities_SharedPointer_icc)
#error This header file contains implementation details of class mito::utilities::SharedPointer
#else

template <class resourceT>
auto
mito::utilities::SharedPointer<resourceT>::id() const -> index_t<resourceT>
{
    // the id is the (immutable) address of this object
    return reinterpret_cast<index_t<resourceT>>(_handle);
}

template <class resourceT>
auto
mito::utilities::SharedPointer<resourceT>::resource(index_t<resourceT> index) -> handle_type
{
    // the id is the (immutable) address of this object
    return reinterpret_cast<handle_type>(index);
}

// interface
template <class resourceT>
auto
mito::utilities::SharedPointer<resourceT>::handle() const noexcept
    -> mito::utilities::SharedPointer<resourceT>::handle_type
{
    // return the handle
    return _handle;
}

template <class resourceT>
auto
mito::utilities::SharedPointer<resourceT>::references() const -> int
{
    // return the count of outstanding references
    return _handle->_references();
}

template <class resourceT>
auto
mito::utilities::SharedPointer<resourceT>::reset() -> void
{
    // release my current handle
    _release();

    // invalidate handle to the resource
    _handle = nullptr;

    // all done
    return;
}

template <class resourceT>
auto
mito::utilities::SharedPointer<resourceT>::is_nullptr() const noexcept -> bool
{
    // all done
    return _handle == nullptr;
}

// operator->
template <class resourceT>
auto
mito::utilities::SharedPointer<resourceT>::operator->() const noexcept
    -> mito::utilities::SharedPointer<resourceT>::handle_type
{
    // return the handle
    return _handle;
}

// // operator*
// template <class resourceT>
// auto
// mito::utilities::SharedPointer<resourceT>::operator*() const
//     -> const mito::utilities::SharedPointer<resourceT>resource_type &
// {
//     // return the resource
//     return *_handle;
// }

// destructor
template <class resourceT>
mito::utilities::SharedPointer<resourceT>::~SharedPointer()
{
    // release my current handle
    _release();
}

// default constructor (invalid shared handle)
template <class resourceT>
mito::utilities::SharedPointer<resourceT>::SharedPointer() : _handle(nullptr)
{}

// the constructor
template <class resourceT>
mito::utilities::SharedPointer<resourceT>::SharedPointer(handle_type resource) : _handle(resource)
{
    // grab a reference to the shared handle
    _acquire();
}

// the copy constructor
template <class resourceT>
mito::utilities::SharedPointer<resourceT>::SharedPointer(
    const mito::utilities::SharedPointer<resourceT> & other) :
    _handle(other._handle)
{
    // grab a reference to the shared handle
    _acquire();
}

// the move constructor
template <class resourceT>
mito::utilities::SharedPointer<resourceT>::SharedPointer(
    mito::utilities::SharedPointer<resourceT> && other) noexcept :
    _handle(std::move(other._handle))
{
    // invalidate other
    other._handle = nullptr;
}

// assignment operator
template <class resourceT>
mito::utilities::SharedPointer<resourceT> &
mito::utilities::SharedPointer<resourceT>::operator=(
    const mito::utilities::SharedPointer<resourceT> & other)
{
    // if {other} and I point to different handles
    if (other._handle != _handle) {
        // release my current handle
        _release();
        // adopt the new shareable
        _handle = other._handle;
        // and grab a reference to it
        _acquire();
    }

    // all done
    return *this;
}

// move assignment operator
template <class resourceT>
mito::utilities::SharedPointer<resourceT> &
mito::utilities::SharedPointer<resourceT>::operator=(
    mito::utilities::SharedPointer<resourceT> && other) noexcept
{
    // if {other} and I point to different handles
    if (other._handle != _handle) {
        // release my current handle
        _release();
        // adopt the new shareable
        _handle = std::move(other._handle);
    }

    // invalidate {other}
    other._handle = nullptr;

    // all done
    return *this;
}

// interface
template <class resourceT>
auto
mito::utilities::SharedPointer<resourceT>::_acquire() const -> void
{
    // acquire resource (increment reference count)
    _handle->_acquire();
    // all done
    return;
}

template <class resourceT>
auto
mito::utilities::SharedPointer<resourceT>::_release() const -> void
{
    // if the handle is in valid state
    if (_handle != nullptr) {
        // release my current handle (decreases reference count by one)
        _handle->_release();

        // all done
        return;
    }

    // all done
    return;
}

#endif
// end of file
