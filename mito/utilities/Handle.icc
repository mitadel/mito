// -*- C++ -*-
//
// michael a.g. aïvázis
// orthologue
// (c) 1998-2022 all rights reserved
//

#if !defined(mito_utilities_Handle_icc)
#error This header file contains implementation details of class mito::utilities::Handle
#else

// interface
template <class Resource, bool immortal>
mito::utilities::Handle<Resource, immortal>::operator mito::utilities::Handle<
    Resource, immortal>::handle_t() const
{
    // get and return the mpi handle
    return _shared->handle();
}


// destructor
template <class Resource, bool immortal>
mito::utilities::Handle<Resource, immortal>::~Handle()
{
    // notify the shareable that I am done with it
    if (_shared->release() == 0) {
        // if its reference count has reached zero, deallocate it
        delete _shared;
    }
    // and return
    return;
}

// the default constructor
template <class Resource, bool immortal>
mito::utilities::Handle<Resource, immortal>::Handle(handle_t handle) : _shared(new shared_t(handle))
{
    // grab a reference to the shared handle
    _shared->acquire();
}

// the copy constructor
template <class Resource, bool immortal>
mito::utilities::Handle<Resource, immortal>::Handle(
    const mito::utilities::Handle<Resource, immortal> & other) :
    _shared(other._shared)
{
    // grab a reference to the shared handle
    _shared->acquire();
}

// operator =
template <class Resource, bool immortal>
mito::utilities::Handle<Resource, immortal> &
mito::utilities::Handle<Resource, immortal>::operator=(
    const mito::utilities::Handle<Resource, immortal> & other)
{
    // if {other} and I point to different shared handles
    if (other._shared != _shared) {
        // notify my shareable that I am done with it
        if (_shared->release() == 0) {
            // and deallocate it if its reference count reached zero
            delete _shared;
        }
        // adopt the new shareable
        _shared = other._shared;
        // and grab a reference to it
        _shared->acquire();
    }

    // all done
    return *this;
}

#endif
// end of file
