// -*- C++ -*-
//
// michael a.g. aïvázis
// orthologue
// (c) 1998-2022 all rights reserved
//

#if !defined(mito_utilities_Shareable_icc)
#error This header file contains implementation details of class mito::utilities::Shareable
#else

// interface
template <class Resource>
int
mito::utilities::Shareable<Resource>::acquire()
{
    // increment the reference count and return it
    return ++_count;
}

template <class Resource>
int
mito::utilities::Shareable<Resource>::release()
{
    // decrement the reference count
    if (--_count == 0 && !_immortal) {
        // if the count reached zero, free the handle
        Resource::free(&_handle);
    }
    // and return the count
    return _count;
}

template <class Resource>
int
mito::utilities::Shareable<Resource>::references() const
{
    // return the count of outstanding references
    return _count;
}


template <class Resource>
typename mito::utilities::Shareable<Resource>::handle_t
mito::utilities::Shareable<Resource>::handle() const
{
    // return the handle
    return _handle;
}


// destructor
template <class Resource>
mito::utilities::Shareable<Resource>::~Shareable()
{}

// constructor
template <class Resource>
mito::utilities::Shareable<Resource>::Shareable(handle_t handle, bool immortal) :
    _count(0),
    _immortal(immortal),
    _handle(handle)
{}

#endif

// end of file
