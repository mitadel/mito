// -*- C++ -*-
//

#if !defined(mito_utilities_SharedPointer_icc)
#error This header file contains implementation details of class mito::utilities::SharedPointer
#else

// interface
template <class Resource, bool immortal>
mito::utilities::SharedPointer<Resource, immortal>::operator mito::utilities::SharedPointer<
    Resource, immortal>::handle_t() const
{
    // return the handle
    return _handle;
}

template <class Resource, bool immortal>
int
mito::utilities::SharedPointer<Resource, immortal>::references() const
{
    // return the count of outstanding references
    return _count;
}

// destructor
template <class Resource, bool immortal>
mito::utilities::SharedPointer<Resource, immortal>::~SharedPointer()
{
    // release my current handle
    _release();

    // and return
    return;
}

// the default constructor
template <class Resource, bool immortal>
mito::utilities::SharedPointer<Resource, immortal>::SharedPointer(handle_t handle) : _handle(handle)
{
    // grab a reference to the shared handle
    _acquire();
}

// the copy constructor
template <class Resource, bool immortal>
mito::utilities::SharedPointer<Resource, immortal>::SharedPointer(
    const mito::utilities::SharedPointer<Resource, immortal> & other) :
    _handle(other._handle)
{
    // grab a reference to the shared handle
    _acquire();
}

// operator =
template <class Resource, bool immortal>
mito::utilities::SharedPointer<Resource, immortal> &
mito::utilities::SharedPointer<Resource, immortal>::operator=(
    const mito::utilities::SharedPointer<Resource, immortal> & other)
{
    // if {other} and I point to different handles
    if (other._handle != _handle) {
        // release my current handle
        _release();
        // adopt the new shareable
        _handle = other._handle;
        // and grab a reference to it
        _acquire();
    }

    // all done
    return *this;
}

// interface
template <class Resource, bool immortal>
int
mito::utilities::SharedPointer<Resource, immortal>::_acquire()
{
    // increment the reference count and return it
    return ++_count;
}

template <class Resource, bool immortal>
int
mito::utilities::SharedPointer<Resource, immortal>::_release()
{
    // decrement the reference count
    if (--_count == 0 && !immortal) {
        // if the count reached zero, delete the resource
        delete _handle;
    }
    // and return the count
    return _count;
}

#endif
// end of file
